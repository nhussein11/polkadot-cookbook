name: "Setup Parachain Template"
description: "Clones, builds, and caches a Polkadot SDK parachain-template"

inputs:
  template-repo:
    description: "Repository URL for the parachain template"
    required: false
    default: "https://github.com/paritytech/polkadot-sdk-parachain-template.git"
  rust-version:
    description: "Rust version to use for building"
    required: true
  template-branch:
    description: "Branch of the parachain template to clone"
    required: false
    default: "main"
  cache-key-suffix:
    description: "Suffix for build cache key"
    required: false
    default: ""
  para-id:
    description: "Parachain ID for configuration"
    required: false
    default: "1000"

outputs:
  template-path:
    description: "Path to cloned parachain template"
    value: ${{ steps.setup.outputs.template-path }}
  runtime-path:
    description: "Path to WASM runtime file"
    value: ${{ steps.setup.outputs.runtime-path }}
  cache-hit:
    description: "Whether build cache was hit"
    value: ${{ steps.build-cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! "${{ inputs.para-id }}" =~ ^[0-9]+$ ]]; then
          echo "‚ùå Invalid para-id: ${{ inputs.para-id }}"
          echo "Expected: positive integer"
          exit 1
        fi
        
        if [[ ! "${{ inputs.template-branch }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ö†Ô∏è Warning: template-branch '${{ inputs.template-branch }}' doesn't follow expected format (vX.Y.Z)"
        fi
        
        # Validate repository URL format
        if [[ ! "${{ inputs.template-repo }}" =~ ^https://github\.com/.+/.+\.git$ ]]; then
          echo "‚ö†Ô∏è Warning: template-repo '${{ inputs.template-repo }}' doesn't follow expected GitHub format"
        fi

    - name: Setup Rust
      uses: ./.github/actions/setup-rust
      with:
        rust-version: ${{ inputs.rust-version }}

    - name: Setup template and paths
      id: setup
      shell: bash
      run: |
        TEMPLATE_PATH="${GITHUB_WORKSPACE}/parachain-template"
        RUNTIME_PATH="${TEMPLATE_PATH}/target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm"
        
        echo "template-path=$TEMPLATE_PATH" >> $GITHUB_OUTPUT
        echo "runtime-path=$RUNTIME_PATH" >> $GITHUB_OUTPUT

    - name: Clone parachain template
      shell: bash
      run: |
        echo "üì• Cloning parachain template from ${{ inputs.template-repo }} (branch: ${{ inputs.template-branch }})..."
        
        if [ -d "parachain-template" ]; then
          echo "üßπ Cleaning existing template directory..."
          rm -rf parachain-template
        fi
        
        git clone \
          --depth 1 \
          --branch ${{ inputs.template-branch }} \
          ${{ inputs.template-repo }} \
          parachain-template
        
        echo "‚úÖ Template cloned successfully"
        
        # Verify critical files exist
        if [ ! -f "parachain-template/Cargo.toml" ]; then
          echo "‚ùå Cargo.toml not found in template"
          exit 1
        fi

    - name: Cache build artifacts
      id: build-cache
      uses: actions/cache@v4
      with:
        path: |
          parachain-template/target/release
          parachain-template/target/wbuild
        key: parachain-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles(inputs.template-repo) }}-${{ inputs.template-branch }}-${{ inputs.rust-version }}-${{ hashFiles('parachain-template/**/Cargo.toml', 'parachain-template/**/Cargo.lock') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          parachain-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles(inputs.template-repo) }}-${{ inputs.template-branch }}-${{ inputs.rust-version }}-
          parachain-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles(inputs.template-repo) }}-${{ inputs.template-branch }}-

    - name: Build parachain
      if: steps.build-cache.outputs.cache-hit != 'true'
      working-directory: parachain-template
      shell: bash
      run: |
        echo "üî® Building parachain template..."
        echo "üìä Available disk space:"
        df -h
        
        # Set build optimizations
        export CARGO_PROFILE_RELEASE_LTO=thin
        export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
        
        # Build with progress and error handling
        cargo build --release --locked --verbose
        
        echo "‚úÖ Build completed successfully"
        
        echo "üìä Final disk space:"
        df -h

    - name: Verify build artifacts
      shell: bash
      run: |
        echo "üîç Verifying build artifacts..."
        
        RUNTIME_PATH="${{ steps.setup.outputs.runtime-path }}"
        
        # Check runtime
        if [ ! -f "$RUNTIME_PATH" ]; then
          echo "‚ùå Runtime WASM not found at: $RUNTIME_PATH"
          echo "üîç Available runtime files:"
          find parachain-template/target -name "*.wasm" -type f || echo "No WASM files found"
          exit 1
        fi
        
        # Check file sizes
        RUNTIME_SIZE=$(du -h "$RUNTIME_PATH" | cut -f1)
        
        echo "‚úÖ Runtime verified: $RUNTIME_SIZE"