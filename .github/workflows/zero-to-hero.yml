name: Zero to Hero
description: "Zero to Hero"

on:
  workflow_dispatch:

jobs:
  setup-dependencies:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      chain-spec-builder-version: ${{ steps.resolve.outputs.chain-spec-builder-version }}
      omni-node-version: ${{ steps.resolve.outputs.omni-node-version }}
      rust-version: ${{ steps.resolve.outputs.rust-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve dependency versions
        id: resolve
        run: |
          # Install yq for YAML parsing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          DEPS_FILE=".github/versions.yml"
          TUTORIAL="zero_to_hero"
          
          # Function to get version (tutorial-specific first, then global)
          get_version() {
            local dep="$1"
            local version
            
            # Try tutorial-specific version first
            version=$(yq eval ".${TUTORIAL}.${dep}" "$DEPS_FILE" 2>/dev/null)
            if [ "$version" = "null" ] || [ -z "$version" ]; then
              # Fallback to global version
              version=$(yq eval ".versions.${dep}" "$DEPS_FILE" 2>/dev/null)
            fi
            
            echo "$version"
          }
          
          # Get versions from config file
          CHAIN_SPEC_VERSION=$(get_version "chain_spec_builder")
          OMNI_NODE_VERSION=$(get_version "polkadot_omni_node")
          
          RUST_VERSION=$(get_version "rust")
          
          echo "chain-spec-builder-version=$CHAIN_SPEC_VERSION" >> $GITHUB_OUTPUT
          echo "omni-node-version=$OMNI_NODE_VERSION" >> $GITHUB_OUTPUT
          echo "rust-version=$RUST_VERSION" >> $GITHUB_OUTPUT
          
          echo "📋 Resolved versions:"
          echo "  - chain-spec-builder: $CHAIN_SPEC_VERSION"
          echo "  - omni-node: $OMNI_NODE_VERSION" 
          echo "  - rust: $RUST_VERSION"
  
  setup-tools:
    name: Setup Tools
    runs-on: ubuntu-latest
    needs: setup-dependencies
    outputs:
      chain-spec-builder-version: ${{ steps.chain-spec.outputs.version }}
      omni-node-version: ${{ steps.omni-node.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup chain-spec-builder
        id: chain-spec
        uses: ./.github/actions/setup-chain-spec-builder
        with:
          chain-spec-builder-version: ${{ needs.setup-dependencies.outputs.chain-spec-builder-version }}
          rust-version: ${{ needs.setup-dependencies.outputs.rust-version }}

      - name: Setup omni-node
        id: omni-node
        uses: ./.github/actions/setup-omni-node
        with:
          omni-node-version: ${{ needs.setup-dependencies.outputs.omni-node-version }}
          rust-version: ${{ needs.setup-dependencies.outputs.rust-version }}

      - name: Cache tools for main job
        uses: actions/cache/save@v4
        with:
          path: ~/.cargo/bin
          key: tools-${{ runner.os }}-${{ runner.arch }}-${{ needs.setup-dependencies.outputs.chain-spec-builder-version }}-${{ needs.setup-dependencies.outputs.omni-node-version }}

  build-parachain:
    name: Build Parachain
    runs-on: ubuntu-latest
    needs: setup-dependencies
    outputs:
      parachain-path: ${{ steps.setup-template.outputs.parachain-path }}
      runtime-path: ${{ steps.setup-template.outputs.runtime-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Zero to Hero parachain
        id: setup-parachain
        uses: ./.github/actions/setup-zero-to-hero-parachain
        with:
          branch: main
          rust-version: ${{ needs.setup-dependencies.outputs.rust-version }}

      - name: Upload parachain artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parachain-artifacts-${{ github.run_id }}
          path: |
            ${{ steps.setup-parachain.outputs.runtime-path }}
          retention-days: 1

  run-parachain:
    name: Run Parachain Node
    runs-on: ubuntu-latest
    needs: [setup-dependencies, setup-tools, build-parachain]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore tools cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/bin
          key: tools-${{ runner.os }}-${{ runner.arch }}-${{ needs.setup-dependencies.outputs.chain-spec-builder-version }}-${{ needs.setup-dependencies.outputs.omni-node-version }}
          fail-on-cache-miss: true

      - name: Download parachain artifacts
        uses: actions/download-artifact@v4
        with:
          name: parachain-artifacts-${{ github.run_id }}
          path: ./artifacts

      - name: Setup paths and permissions
        run: |
          # Add tools to PATH
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
          
          # Make binaries executable
          find ./artifacts -name "*parachain*" -type f -exec chmod +x {} \;
          
          # Verify tools are available
          chain-spec-builder --version
          polkadot-omni-node --version

          # Find the runtime WASM file
          RUNTIME_WASM=$(find ./artifacts -name "*.compressed.wasm" -type f | head -1)
          if [ -z "$RUNTIME_WASM" ]; then
            echo "❌ Runtime WASM file not found"
            echo "Available files:"
            find ./artifacts -type f
            exit 1
          fi
          
          mkdir -p ./target/release/wbuild/parachain-template-runtime/
          cp $RUNTIME_WASM ./target/release/wbuild/parachain-template-runtime/

      - name: Generate chain specification
        run: |
          echo "🔧 Generating chain specification..."
          echo "📋 Using repository: https://github.com/brunopgalvao/polkadot-sdk-docs-tests"
          echo "📋 Using branch: main"
          
          # Generate chain spec
          chain-spec-builder create \
            -t development \
            --relay-chain paseo \
            --para-id 1000 \
            --runtime ./target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm \
            named-preset development
          
          # Verify chain spec was created
          if [ ! -f "chain_spec.json" ]; then
            echo "❌ Chain spec generation failed"
            exit 1
          fi
          
          echo "✅ Chain specification generated successfully"
          echo "📄 Chain spec size: $(du -h chain_spec.json | cut -f1)"

      - name: Validate chain specification
        run: |
          echo "🔍 Validating chain specification..."
          
          # Check if it's valid JSON
          if ! jq empty chain_spec.json 2>/dev/null; then
            echo "❌ Invalid JSON in chain specification"
            exit 1
          fi
          
          # Extract key information
          CHAIN_NAME=$(jq -r '.name // "unknown"' chain_spec.json)
          PARA_ID=$(jq -r '.para_id // "unknown"' chain_spec.json)
          RELAY_CHAIN=$(jq -r '.relay_chain // "unknown"' chain_spec.json)
          
          echo "✅ Chain specification is valid"
          echo "📋 Chain Name: $CHAIN_NAME"
          echo "🆔 Para ID: $PARA_ID"
          echo "🔗 Relay Chain: $RELAY_CHAIN"
          echo "📦 Parachain Source: https://github.com/brunopgalvao/polkadot-sdk-docs-tests@main"

      - name: Start Polkadot omni-node
        timeout-minutes: 5
        run: |
          echo "🚀 Starting Polkadot omni-node..."
          echo "📦 Built from: https://github.com/brunopgalvao/polkadot-sdk-docs-tests@main"
          
          # Run for 120 seconds
          echo "⏱️ Running for 120 seconds"
          TIMEOUT_CMD="timeout 120s"
          
          # Start node in background with logging
          $TIMEOUT_CMD \
          polkadot-omni-node \
            --chain ./chain_spec.json \
            --dev \
            > node.log 2>&1 &
          
          NODE_PID=$!
          echo "NODE_PID=$NODE_PID" >> $GITHUB_ENV
          
          echo "✅ Node started with PID: $NODE_PID"
          
          # Wait a moment for startup
          sleep 10
          
          # Check if node is still running
          if ! kill -0 $NODE_PID 2>/dev/null; then
            echo "❌ Node failed to start"
            echo "📋 Last 50 lines of log:"
            tail -50 node.log
            exit 1
          fi
          
          echo "✅ Node is running successfully"

      - name: Health check and monitoring
        timeout-minutes: 2
        run: |
          echo "🏥 Performing health checks..."
          
          # Monitor node for a short period
          for i in {1..12}; do
            if ! kill -0 $NODE_PID 2>/dev/null; then
              echo "❌ Node stopped unexpectedly"
              echo "📋 Final log output:"
              tail -100 node.log
              exit 1
            fi
            
            echo "✅ Health check $i/12 - Node is running"
            sleep 5
          done
          
          echo "✅ All health checks passed"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          
          # Stop the node gracefully
          if [ -n "${NODE_PID:-}" ] && kill -0 $NODE_PID 2>/dev/null; then
            echo "🛑 Stopping node (PID: $NODE_PID)..."
            kill -TERM $NODE_PID
            
            # Wait for graceful shutdown
            for i in {1..10}; do
              if ! kill -0 $NODE_PID 2>/dev/null; then
                echo "✅ Node stopped gracefully"
                break
              fi
              sleep 1
            done
            
            # Force kill if still running
            if kill -0 $NODE_PID 2>/dev/null; then
              echo "⚡ Force stopping node..."
              kill -KILL $NODE_PID
            fi
          fi
          
          echo "✅ Cleanup completed"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: node-logs-${{ github.run_id }}
          path: |
            node.log
            chain_spec.json
          retention-days: 7